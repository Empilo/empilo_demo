from typing import Optional, Tuple
import numpy as np
from dataclasses import dataclass
import math
import torch
from scipy.spatial.transform import Rotation as R


"""""" """ Spherical Harmonics """ """"""

NUM_SH_BASIS = 25
# SH_C0 = 1.0
SH_C0 = 0.28209479177387814

SH_C1 = 0.4886025119029199

SH_C2 = [
    1.0925484305920792,
    1.0925484305920792,
    0.31539156525252005,
    1.0925484305920792,
    0.5462742152960396,
]
SH_C3 = [
    0.5900435899266435,
    2.890611442640554,
    0.4570457994644658,
    0.3731763325901154,
    0.4570457994644658,
    1.445305721320277,
    0.5900435899266435,
]
SH_C4 = [
    2.5033429417967046,
    1.7701307697799304,
    0.9461746957575601,
    0.6690465435572892,
    0.10578554691520431,
    0.6690465435572892,
    0.47308734787878004,
    1.7701307697799304,
    0.6258357354491761,
]


def eval_sh(dirs, basis_dim):
    """
    Evaluate spherical harmonics bases at unit directions,
    without taking linear combination.
    At each point, the final result may the be
    obtained through simple multiplication.

    :param basis_dim: int SH basis dim. Currently, 1-25 square numbers supported
    :param dirs: torch.Tensor (..., 3) unit directions

    :return: torch.Tensor (..., basis_dim)
    """
    result = torch.empty((*dirs.shape[:-1], basis_dim), dtype=dirs.dtype, device=dirs.device)
    result[..., 0] = SH_C0

    if basis_dim > 1:
        x, y, z = dirs.unbind(-1)
        result[..., 1] = SH_C1 * y
        result[..., 2] = SH_C1 * z
        result[..., 3] = SH_C1 * x

        if basis_dim > 4:
            xx, yy, zz = x * x, y * y, z * z
            xy, yz, xz = x * y, y * z, x * z
            result[..., 4] = SH_C2[0] * xy
            result[..., 5] = SH_C2[1] * yz
            result[..., 6] = SH_C2[2] * (2 * zz - xx - yy)
            result[..., 7] = SH_C2[3] * xz
            result[..., 8] = SH_C2[4] * (xx - yy)

            if basis_dim > 9:
                result[..., 9] = SH_C3[0] * y * (3 * xx - yy)
                result[..., 10] = SH_C3[1] * xy * z
                result[..., 11] = SH_C3[2] * y * (4 * zz - xx - yy)
                result[..., 12] = SH_C3[3] * z * (2 * zz - 3 * xx - 3 * yy)
                result[..., 13] = SH_C3[4] * x * (4 * zz - xx - yy)
                result[..., 14] = SH_C3[5] * z * (xx - yy)
                result[..., 15] = SH_C3[6] * x * (xx - 3 * yy)

                if basis_dim > 16:
                    result[..., 16] = SH_C4[0] * xy * (xx - yy)
                    result[..., 17] = SH_C4[1] * yz * (3 * xx - yy)
                    result[..., 18] = SH_C4[2] * xy * (7 * zz - 1)
                    result[..., 19] = SH_C4[3] * yz * (7 * zz - 3)
                    result[..., 20] = SH_C4[4] * (zz * (35 * zz - 30) + 3)
                    result[..., 21] = SH_C4[5] * xz * (7 * zz - 3)
                    result[..., 22] = SH_C4[6] * (xx - yy) * (7 * zz - 1)
                    result[..., 23] = SH_C4[7] * xz * (xx - 3 * yy)
                    result[..., 24] = SH_C4[8] * (xx * (xx - 3 * yy) - yy * (3 * xx - yy))

    return result


"""""" """ Blendshape """ """"""

BS_avg = [
    5.213446456764359e-06,
    0.16669823229312897,
    0.13342800736427307,
    0.2394390106201172,
    0.02817343734204769,
    0.031894780695438385,
    0.0001852651039371267,
    1.0505261798243737e-06,
    7.755829756206367e-07,
    0.09538392722606659,
    0.09687063843011856,
    0.04837082698941231,
    0.054106879979372025,
    0.050325870513916016,
    0.2923913300037384,
    0.289763480424881,
    0.054302118718624115,
    0.2896799147129059,
    0.2827378511428833,
    0.5719811320304871,
    0.4715667963027954,
    0.009552574716508389,
    0.008078848011791706,
    0.0005809404538013041,
    0.002617550315335393,
    0.13617880642414093,
    0.0011960433330386877,
    0.01582212746143341,
    0.01799319125711918,
    0.0023499238304793835,
    0.0021478186827152967,
    0.002735330956056714,
    0.012930524535477161,
    0.002533938270062208,
    0.012708857655525208,
    0.02874922938644886,
    0.09024842828512192,
    0.024379998445510864,
    0.07385209202766418,
    0.0015629681292921305,
    0.009962575510144234,
    0.02270273119211197,
    0.00492466427385807,
    0.012361988425254822,
    0.13260692358016968,
    0.09130257368087769,
    0.029429972171783447,
    0.04501141607761383,
    0.02497328817844391,
    0.02007053978741169,
    1.0372474434916512e-06,
    2.735082262006472e-06,
]

BS_std = [
    3.7735596833954332e-06,
    0.17489774525165558,
    0.15752580761909485,
    0.2558288872241974,
    0.0566210113465786,
    0.058182694017887115,
    0.00017762239440344274,
    9.430940508536878e-07,
    6.643055598942738e-07,
    0.07529420405626297,
    0.09130890667438507,
    0.0670599564909935,
    0.07072962075471878,
    0.0931716039776802,
    0.23606657981872559,
    0.2169984132051468,
    0.08248116075992584,
    0.1357870250940323,
    0.1328657865524292,
    0.11901548504829407,
    0.13480111956596375,
    0.005635835230350494,
    0.007369995582848787,
    0.0004306706541683525,
    0.005045257043093443,
    0.11021392792463303,
    0.0031847909558564425,
    0.021228641271591187,
    0.01639910414814949,
    0.0034873951226472855,
    0.005564369726926088,
    0.0071375202387571335,
    0.028841163963079453,
    0.0069220466539263725,
    0.01933038793504238,
    0.042086586356163025,
    0.07984038442373276,
    0.031420037150382996,
    0.21189694106578827,
    0.004422774072736502,
    0.014739643782377243,
    0.03199300915002823,
    0.015701361000537872,
    0.012048850767314434,
    0.1916675865650177,
    0.15603557229042053,
    0.04440206289291382,
    0.059086523950099945,
    0.0527803935110569,
    0.04457618296146393,
    8.116973049254739e-07,
    2.187001655329368e-06,
]

DECA_avg = [
    0.9604838490486145,
    0.712340235710144,
    0.002512097591534257,
    0.2881181836128235,
    -0.3553370535373688,
    -0.06968149542808533,
    -0.0020351428538560867,
    -0.493831068277359,
    0.07652048766613007,
    0.26497647166252136,
    -0.3872056007385254,
    -0.677211582660675,
    0.05961377173662186,
    0.33661264181137085,
    0.22830075025558472,
    0.19009973108768463,
    -0.3366048038005829,
    -0.042115576565265656,
    -0.2899271547794342,
    0.1845400482416153,
    0.06427504122257233,
    0.18840178847312927,
    -0.010427076369524002,
    0.148466095328331,
    0.09963563829660416,
    -0.1298961043357849,
    0.04195301979780197,
    0.243070587515831,
    0.025439448654651642,
    -0.15357455611228943,
    0.24749718606472015,
    -0.2918454706668854,
    0.1213923990726471,
    -0.2267448902130127,
    0.022291170433163643,
    -0.24734219908714294,
    0.48498058319091797,
    -0.05009432137012482,
    0.34453022480010986,
    0.09352929890155792,
    -0.23126493394374847,
    0.016007477417588234,
    0.036473024636507034,
    -0.10104435682296753,
    -0.05045095086097717,
    0.18592610955238342,
    -0.017759744077920914,
    0.03124033845961094,
    -0.010509753599762917,
    -0.13209350407123566,
]

DECA_std = [
    0.30603259801864624,
    0.189158096909523,
    0.10726924240589142,
    0.22140637040138245,
    0.3277568519115448,
    0.22721445560455322,
    0.2588028907775879,
    0.2701055109500885,
    0.21251334249973297,
    0.32024946808815,
    0.23165765404701233,
    0.3355509340763092,
    0.08262528479099274,
    0.08752138912677765,
    0.1589013785123825,
    0.23330946266651154,
    0.249264195561409,
    0.10449480265378952,
    0.12289822101593018,
    0.27133092284202576,
    0.11483882367610931,
    0.18844255805015564,
    0.2096932828426361,
    0.06075981631875038,
    0.1119295060634613,
    0.1013847291469574,
    0.05706800892949104,
    0.11037193238735199,
    0.06957457959651947,
    0.05428129434585571,
    0.08576041460037231,
    0.05446436256170273,
    0.06294776499271393,
    0.09332437068223953,
    0.07576217502355576,
    0.1033494770526886,
    0.14298759400844574,
    0.06370318681001663,
    0.051793213933706284,
    0.04230097308754921,
    0.08018849045038223,
    0.08424630761146545,
    0.04708755016326904,
    0.05856388434767723,
    0.04358557611703873,
    0.08382878452539444,
    0.0942472442984581,
    0.05704813823103905,
    0.07525146752595901,
    0.04051348567008972,
]


def bs_normalize(scores):
    assert len(scores) == len(BS_avg) == len(BS_std), "Blendshape Dimension Check"

    for i in range(len(BS_avg)):
        scores[i] = (scores[i] - BS_avg[i]) / BS_std[i] * 0.5

    return scores


def deca_normalize(scores):
    deca_avg = torch.tensor(DECA_avg, dtype=scores.dtype, device=scores.device)
    deca_std = torch.tensor(DECA_std, dtype=scores.dtype, device=scores.device)

    assert scores.shape[1] == deca_avg.shape[0] == deca_std.shape[0], "Blendshape Dimension Check"

    normalized_scores = (scores - deca_avg) / deca_std * 0.5

    return normalized_scores.detach()

"""""" """ Camera Matrix Computation """ """"""


def cam_world_matrix_transform(RT):
    # RT (...,4,4) cam2world matrix or world2cam matrix
    rot = RT[..., :3, :3]
    trans = RT[..., :3, 3:]

    inverse_RT = torch.zeros_like(RT, device=RT.device)
    inverse_RT[..., 3, 3] = 1.0
    inverse_rot = rot.transpose(-1, -2)  # to transpose
    inverse_trans = -inverse_rot @ trans
    inverse_RT[..., :3, :3] = inverse_rot
    inverse_RT[..., :3, 3:] = inverse_trans
    return inverse_RT  # (B,4,4)


def cam_world_trans_transform(RT):
    rot = RT[..., :3, :3]
    trans = RT[..., :3, 3:]

    inverse_rot = rot.transpose(-1, -2)  # to transpose
    inverse_trans = -inverse_rot @ trans
    return inverse_trans.squeeze(-1)